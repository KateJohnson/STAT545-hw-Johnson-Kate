{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Writing functions and working with lists\"\noutput: github_document \nkeep_md: true \n---\n\n## 2. Writing Functions\n\nI'll stick with gapminder for this exercise.\n\n```{r}\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(knitr)\nlibrary(gapminder)\n```\n\nJust to remind myself of what it looks like: \n\n```{r}\nkable(head(gapminder))\n```\n\n**1. A linear model**\n\nI will write a basic function to fit a linear model for the relationship between life expectancy and year. As suggested by Jenny in her [tutorial](http://stat545.com/block012_function-regress-lifeexp-on-year.html), it's definitely a good idea to force the intercept to start at the first year in the gapminder data (1952) not the first year ever (0)!  \n\n```{r}\nlm_fit <- function(mydata, offset=1952) {\n  the_lm <- lm(lifeExp ~ I(year-offset), data=mydata)\n    coef(the_lm)\n}\n```\n\nLet's see if it works on gapminder:\n\n```{r}\nlm_fit(gapminder)\n```\n\nIt seems like the function is working, but I'll do a quick sanity check.\n\n```{r}\nlm(lifeExp ~ I(year-1952), gapminder)\n```\n\nLooks good! Now what about using the function on a single country within the gapminder data?\n\n```{r}\ngapminder %>%\n  filter(country==\"France\") %>%\n      lm_fit()\n```\n\nThat's good for now, but in the next exercise I'll automate this task in order to fit a linear model for each country without have to repeat the above command hundreds of times.\n\nHowever, I would also like to be able to fit a couple different types of models, such as:\n\n**2. A quadratic model**\n\nI'll include a squared term for year to account for potential non-linearity in the change in life expectancy over time.\n\n```{r}\nquad_fit <- function(mydata, offset=1952) {\n  the_quad <- lm(lifeExp ~ I(year-offset) + I((year-offset)^2), data=mydata)\n    coef(the_quad)\n}\n\nquad_fit(gapminder)\n```\n\n**2. A robust regression model**\n\n```{r}\nsuppressPackageStartupMessages(library(MASS))\n\nrobust_fit <- function(mydata, offset=1952, method=\"M\") {\n  the_robust <- MASS::rlm(lifeExp ~ I(year-offset), method=method, data=mydata)\n    coef(the_robust)\n}\n\nrobust_fit(gapminder)\n```\n\nThis method produces very similar coefficients as the linear model, but robust regression using M-estimation will be less influenced by outliers in life expectancy, so there will probably be bigger differences for certain countries. \n\nNow I want to apply these functions to nested dataframes consisting of the countries in gapminder.\n\n## 6. Working with nested dataframes",
    "created" : 1510110386322.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3755068880",
    "id" : "E46F5C35",
    "lastKnownWriteTime" : 1510119336,
    "last_content_update" : 1510119336096,
    "path" : "~/Google Drive/Classes/STAT 545.547/STAT545-hw-Johnson-Kate/STAT545-hw-Johnson-Kate_Oct5/hw06-Functions_lists/Functions_lists.Rmd",
    "project_path" : "hw06-Functions_lists/Functions_lists.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}